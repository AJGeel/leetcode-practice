var $jscomp={scope:{},executeAsyncGenerator:function(a){function b(b){return a.next(b)}function c(b){return a["throw"](b)}return new Promise(function(d,e){function f(a){a.done?d(a.value):Promise.resolve(a.value).then(b,c).then(f,e)}f(a.next())})}};$jscomp.defineProperty="function"==typeof Object.defineProperties?Object.defineProperty:function(a,b,c){if(c.get||c.set)throw new TypeError("ES3 does not support getters and setters.");a!=Array.prototype&&a!=Object.prototype&&(a[b]=c.value)};
$jscomp.getGlobal=function(a){return"undefined"!=typeof window&&window===a?a:"undefined"!=typeof global&&null!=global?global:a};$jscomp.global=$jscomp.getGlobal(this);$jscomp.SYMBOL_PREFIX="jscomp_symbol_";$jscomp.initSymbol=function(){$jscomp.initSymbol=function(){};$jscomp.global.Symbol||($jscomp.global.Symbol=$jscomp.Symbol)};$jscomp.symbolCounter_=0;$jscomp.Symbol=function(a){return $jscomp.SYMBOL_PREFIX+(a||"")+$jscomp.symbolCounter_++};
$jscomp.initSymbolIterator=function(){$jscomp.initSymbol();var a=$jscomp.global.Symbol.iterator;a||(a=$jscomp.global.Symbol.iterator=$jscomp.global.Symbol("iterator"));"function"!=typeof Array.prototype[a]&&$jscomp.defineProperty(Array.prototype,a,{configurable:!0,writable:!0,value:function(){return $jscomp.arrayIterator(this)}});$jscomp.initSymbolIterator=function(){}};$jscomp.arrayIterator=function(a){var b=0;return $jscomp.iteratorPrototype(function(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}})};
$jscomp.iteratorPrototype=function(a){$jscomp.initSymbolIterator();a={next:a};a[$jscomp.global.Symbol.iterator]=function(){return this};return a};$jscomp.makeIterator=function(a){$jscomp.initSymbolIterator();var b=a[Symbol.iterator];return b?b.call(a):$jscomp.arrayIterator(a)};
$jscomp.polyfill=function(a,b,c,d){if(b){c=$jscomp.global;a=a.split(".");for(d=0;d<a.length-1;d++){var e=a[d];e in c||(c[e]={});c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&$jscomp.defineProperty(c,a,{configurable:!0,writable:!0,value:b})}};$jscomp.EXPOSE_ASYNC_EXECUTOR=!0;$jscomp.FORCE_POLYFILL_PROMISE=!1;var endpoint="https://www.random.org/integers/?num=200&min=1&max=10&col=1&base=10&format=plain&rnd=new",dataset={raw:[],count:{1:0,2:0,3:0,4:0,5:0,6:0,7:0,8:0,9:0,10:0}},ctx=document.getElementById("graph").getContext("2d");
function fetchText(a){return $jscomp.executeAsyncGenerator(function(){function b(b,g){for(;;)switch(c){case 0:return c=1,{value:fetch(a),done:!1};case 1:if(void 0===g){c=2;break}c=-1;throw g;case 2:h=l=b;if(200!==h.status){c=3;break}c=4;return{value:h.text(),done:!1};case 4:if(void 0===g){c=5;break}c=-1;throw g;case 5:e=f=b;d="";d+=e;d=d.split("\n");for(i=0;i<d.length;i++)dataset.raw[i]=d[i];for(i=1;11>i;i++)dataset.count[i]=dataset.raw.occurrence(""+i),addData(frequencyChart,i,dataset.count[i]);
case 3:c=-1;default:return{value:void 0,done:!0}}}var c=0,d,e,f,h,l,k={next:function(a){return b(a,void 0)},"throw":function(a){return b(void 0,a)},"return":function(a){throw Error("Not yet implemented");}};$jscomp.initSymbolIterator();k[Symbol.iterator]=function(){return this};return k}())}
function onceMore(){for(i=0;100>i;i++)removeData(frequencyChart);"https://www.random.org/integers/?num=200&min=1&max=10&col=1&base=10&format=plain&rnd=new"!=endpoint&&(endpoint="https://www.random.org/integers/?num=200&min=1&max=10&col=1&base=10&format=plain&rnd=new");fetchText(endpoint)}
function newEndpoint(){var a=prompt("How many numbers would you like instead? (Between 1 and 10000)","1337");if(isNaN(a))alert("Please enter a number");else if(0>a)alert("Please enter a non-negative integer");else if(1E4<a)alert("Please enter a number that is less than 10,000.");else{endpoint="https://www.random.org/integers/?num="+a+"&&min=1&max=10&col=1&base=10&format=plain&rnd=new";for(i=0;100>i;i++)removeData(frequencyChart);fetchText(endpoint)}}
function addData(a,b,c){a.data.labels.push(b);a.data.datasets.forEach(function(a){a.data.push(c)});a.update()}function removeData(a){a.data.labels.pop();a.data.datasets.forEach(function(a){a.data.pop()});a.update()}Array.prototype.occurrence=function(a){return this.filter(function(b){return b===a}).length};
var frequencyChart=new Chart(ctx,{type:"bar",data:{labels:[],datasets:[{label:"Frequency",data:[],backgroundColor:"hsla(0, 75%, 70%, 0.2);hsla(36, 75%, 70%, 0.2);hsla(72, 75%, 70%, 0.2);hsla(108, 75%, 70%, 0.2);hsla(144, 75%, 70%, 0.2);hsla(180, 75%, 70%, 0.2);hsla(216, 75%, 70%, 0.2);hsla(252, 75%, 70%, 0.2);hsla(288, 75%, 70%, 0.2);hsla(324, 75%, 70%, 0.2)".split(";"),borderColor:"hsla(0, 75%, 70%, 1);hsla(36, 75%, 70%, 1);hsla(72, 75%, 70%, 1);hsla(108, 75%, 70%, 1);hsla(144, 75%, 70%, 1);hsla(180, 75%, 70%, 1);hsla(216, 75%, 70%, 1);hsla(252, 75%, 70%, 1);hsla(288, 75%, 70%, 1);hsla(324, 75%, 70%, 1)".split(";"),
borderWidth:1}]},options:{scales:{yAxes:[{ticks:{beginAtZero:!0}}]}}});fetchText(endpoint);
